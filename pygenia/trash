"""def call(
        self,
        trigger: agentspeak.Trigger,
        goal_type: agentspeak.GoalType,
        term: agentspeak.Literal,
        calling_intention: agentspeak.runtime.Intention,
        delayed: bool = False,
    ):
        return self.emotional_engine.call(
            trigger,
            goal_type,
            term,
            calling_intention,
            delayed,
        )
        This method is used to call an event.

        Args:
            trigger (agentspeak.Trigger): Trigger of the event.
            goal_type (agentspeak.GoalType): Type of the event.
            term (agentspeak.Literal): Term of the event.
            calling_intention (agentspeak.runtime.Intention): Intention of the agent.
            delayed (bool, optional): Delayed event. Defaults to False.

        Raises:
            AslError: "expected literal" if the term is not a literal.
            AslError: "expected literal term" if the term is not a literal term.
            AslError: "no applicable plan for" + str(term)" if there is no applicable plan for the term.
            log.error: "expected end of plan" if the plan is not finished. The plan finish with a ".".

        Returns:
            bool: True if the event is called.

        If the event is a belief, we add or remove it.

        If the event is a goal addition, we start the reasoning cycle.

        If the event is a goal deletion, we remove it from the intentions queue.

        If the event is a tellHow addition, we tell the agent how to do it.

        If the event is a tellHow deletion, we remove the tellHow from the agent.

        If the event is a askHow addition, we ask the agent how to do it.

        # Modify beliefs.
        if goal_type == agentspeak.GoalType.belief:
            # We recieve a belief and the affective cycle is activated.
            # We need to provide to the sunction the term and the Trigger type.
            self.event_queue.append((term, trigger))
            # self.appraisal((term, trigger),0)
            if trigger == agentspeak.Trigger.addition:
                self.add_belief(term, calling_intention.scope)
            else:
                found = self.remove_belief(term, calling_intention)
                if not found:
                    return True

        # Freeze with caller scope.
        frozen = agentspeak.freeze(term, calling_intention.scope, {})

        if not isinstance(frozen, agentspeak.Literal):
            raise AslError("expected literal")

        # Wake up waiting intentions.
        for intention_stack in self.C["I"]:
            if not intention_stack:
                continue
            intention = intention_stack[-1]

            if not intention.waiter or not intention.waiter.event:
                continue
            event = intention.waiter.event

            if event.trigger != trigger or event.goal_type != goal_type:
                continue

            if agentspeak.unifies_annotated(event.head, frozen):
                intention.waiter = None

        # If the goal is an achievement and the trigger is an removal, then the agent will delete the goal from his list of intentions
        if (
            goal_type == agentspeak.GoalType.achievement
            and trigger == agentspeak.Trigger.removal
        ):
            if not agentspeak.is_literal(term):
                raise AslError("expected literal term")

            # Remove a intention passed by the parameters.
            for intention_stack in self.C["I"]:
                if not intention_stack:
                    continue

                intention = intention_stack[-1]

                if intention.head_term.functor == term.functor:
                    if agentspeak.unifies(term.args, intention.head_term.args):
                        intention_stack.remove(intention)
            return True

        # If the goal is an tellHow and the trigger is an addition, then the agent will add the goal received as string to his list of plans
        if (
            goal_type == agentspeak.GoalType.tellHow
            and trigger == agentspeak.Trigger.addition
        ):

            str_plan = term.args[2]

            tokens = []
            tokens.extend(
                agentspeak.lexer.tokenize(
                    agentspeak.StringSource("<stdin>", str_plan),
                    agentspeak.Log(LOGGER),
                    1,
                )
            )  # extend the tokens with the tokens of the string plan

            # Prepare the conversion from tokens to AstPlan
            first_token = tokens[0]
            log = agentspeak.Log(LOGGER)
            tokens.pop(0)
            tokens = iter(tokens)

            # Converts the list of tokens to a Astplan
            if first_token.lexeme in ["@", "+", "-"]:
                tok, ast_plan = agentspeak.parser.parse_plan(first_token, tokens, log)
                if tok.lexeme != ".":
                    raise log.error("", tok, "expected end of plan")

            # Prepare the conversi√≥n of Astplan to Plan
            variables = {}
            actions = agentspeak.stdlib.actions

            head = ast_plan.event.head.accept(
                agentspeak.runtime.BuildTermVisitor(variables)
            )

            if ast_plan.context:
                context = ast_plan.context.accept(
                    BuildQueryVisitor(variables, actions, log)
                )
            else:
                context = TrueQuery()

            body = Instruction(agentspeak.runtime.noop)
            body.f = agentspeak.runtime.noop
            if ast_plan.body:
                ast_plan.body.accept(
                    BuildInstructionsVisitor(variables, actions, body, log)
                )

            # Converts the Astplan to Plan
            plan = agentspeak.runtime.Plan(
                ast_plan.event.trigger,
                ast_plan.event.goal_type,
                head,
                context,
                body,
                ast_plan.body,
                ast_plan.annotations,
            )

            if ast_plan.args[0] is not None:
                plan.args[0] = ast_plan.args[0]

            if ast_plan.args[1] is not None:
                plan.args[1] = ast_plan.args[1]

            # Add the plan to the agent
            self.add_plan(plan)
            return True

        # If the goal is an askHow and the trigger is an addition, then the agent will find the plan in his list of plans and send it to the agent that asked
        if (
            goal_type == agentspeak.GoalType.askHow
            and trigger == agentspeak.Trigger.addition
        ):
            self.T["e"] = agentspeak.runtime.Event(trigger, goal_type, term.args[2])
            return self._ask_how(term)

        # If the goal is an unTellHow and the trigger is a removal, then the agent will delete the goal from his list of plans
        if (
            goal_type == agentspeak.GoalType.tellHow
            and trigger == agentspeak.Trigger.removal
        ):

            label = term.args[2]

            delete_plan = []
            plans = self.plans.values()
            for plan in plans:
                for differents in plan:
                    if ("@" + str(differents.annotation[0].functor)).startswith(label):
                        delete_plan.append(differents)
            for differents in delete_plan:
                plan.remove(differents)
            return True

        self.C["E"] = (
            [agentspeak.runtime.Event(trigger, goal_type, term)]
            if "E" not in self.C
            else self.C["E"] + [agentspeak.runtime.Event(trigger, goal_type, term)]
        )
        self.current_step = "SelEv"
        self.applySemanticRuleDeliberate(delayed, calling_intention)

        # if goal_type == agentspeak.GoalType.achievement and trigger == agentspeak.Trigger.addition:
        #    raise AslError("no applicable plan for %s%s%s/%d" % (
        #        trigger.value, goal_type.value, frozen.functor, len(frozen.args)))
        # elif goal_type == agentspeak.GoalType.test:
        #    return self.test_belief(term, calling_intention)
        return True"""

    def UpdateAS(self):
        """
        This method is used to update the affective state.
        """
        self.DISPLACEMENT = 0.5
        if isinstance(self.affective_info.get_mood(), PAD):
            pad = PAD()
            calculated_as = self.deriveASFromAppraisalVariables()

            if calculated_as != None:
                # PAD current_as = (PAD) getAS();
                current_as = self.affective_info.get_mood()

                tmpVal = None
                vDiff_P = None
                vDiff_A = None
                vDiff_D = None
                vectorToAdd_P = None
                vectorToAdd_A = None
                vectorToAdd_D = None
                lengthToAdd = None
                VEC = calculated_as

                # Calculating the module of VEC
                VECmodule = math.sqrt(
                    math.pow(VEC.getP(), 2)
                    + math.pow(VEC.getA(), 2)
                    + math.pow(VEC.getD(), 2)
                )

                # 1 Applying the pull and push of ALMA
                if PAD.betweenVECandCenter(current_as, VEC) or not PAD.sameOctant(
                    current_as, VEC
                ):
                    vDiff_P = VEC.getP() - current_as.getP()
                    vDiff_A = VEC.getA() - current_as.getA()
                    vDiff_D = VEC.getD() - current_as.getD()
                else:
                    vDiff_P = current_as.getP() - VEC.getP()
                    vDiff_A = current_as.getA() - VEC.getA()
                    vDiff_D = current_as.getD() - VEC.getD()

                # 2 The module of the vector VEC () is multiplied by the DISPLACEMENT and this
                # is the length that will have the vector to be added to 'as'
                lengthToAdd = VECmodule * self.DISPLACEMENT

                # 3 Determining the vector to add
                vectorToAdd_P = vDiff_P * self.DISPLACEMENT
                vectorToAdd_A = vDiff_A * self.DISPLACEMENT
                vectorToAdd_D = vDiff_D * self.DISPLACEMENT

                # 4 The vector vectorToAdd is added to 'as' and this is the new value of
                # the current affective state
                tmpVal = current_as.getP() + vectorToAdd_P
                if tmpVal > 1:
                    tmpVal = 1.0
                else:
                    if tmpVal < -1:
                        tmpVal = -1.0
                pad.setP(round(tmpVal * 10.0) / 10.0)
                tmpVal = current_as.getA() + vectorToAdd_A
                if tmpVal > 1:
                    tmpVal = 1.0
                else:
                    if tmpVal < -1:
                        tmpVal = -1.0
                pad.setA(round(tmpVal * 10.0) / 10.0)
                tmpVal = current_as.getD() + vectorToAdd_D
                if tmpVal > 1:
                    tmpVal = 1.0
                else:
                    if tmpVal < -1:
                        tmpVal = -1.0
                pad.setD(round(tmpVal * 10.0) / 10.0)

                self.affective_info.set_mood(pad)
                AClabel = self.getACLabel()
                self.AfE = AClabel
        pass
    
    
    
    
    
    
    
    
    
    def applySelEv(self) -> bool:
        """
        This method is used to select the event that will be executed in the next step

        Returns:
            bool: True if the event was selected
        """

        # self.term = self.ast_goal.atom.accept(agentspeak.runtime.BuildTermVisitor({}))
        if "E" in self.C and len(self.C["E"]) > 0:
            # Select one event from the list of events and remove it from the list without using pop
            self.T["e"] = self.C["E"][0]
            self.C["E"] = self.C["E"][1:]
            self.frozen = agentspeak.freeze(
                self.T["e"].head, agentspeak.runtime.Intention().scope, {}
            )
            self.T["i"] = agentspeak.runtime.Intention()
            self.current_step = "RelPl"
        else:
            self.current_step = "SelEv"
            return False

        return True

    def applyRelPl(self) -> bool:
        """
        This method is used to find the plans that are related to the current goal.
        We say that a plan is related to a goal if both have the same functor

        Returns:
            bool: True if the plans were found, False otherwise

        - If the plans were found, the dictionary T["R"] will be filled with the plans found and the current step will be changed to "AppPl"
        - If not plans were found, the current step will be changed to "SelEv" to select a new event
        """

        RelPlan = collections.defaultdict(lambda: [])
        plans = self.plans.values()
        for plan in plans:
            for differents in plan:
                if self.T["e"].head.functor in differents.head.functor:
                    RelPlan[
                        (
                            differents.trigger,
                            differents.goal_type,
                            differents.head.functor,
                            len(differents.head.args),
                        )
                    ].append(differents)

        if not RelPlan:
            self.current_step = "SelEv"
            return False
        self.T["R"] = RelPlan
        self.current_step = "AppPl"
        return True

    def applyAppPl(self) -> bool:
        """
        This method is used to find the plans that are applicable to the current goal.
        We say that a plan is applicable to a goal if both have the same functor,
        the same number of arguments and the context are satisfied

        Returns:
            bool: True if the plans were found, False otherwise

        - The dictionary T["Ap"] will be filled with:
            + The plans that do not require a specific affective state
            + The plans whose required affective state matches that of the agent
        - The current step will be changed to "SelAppl"
        - If not applicable plans were found, return False
        """
        plans_list = self.T["R"][
            (
                self.T["e"].trigger,
                self.T["e"].goal_type,
                self.frozen.functor,
                len(self.frozen.args),
            )
        ]

        self.T["Ap"] = [plan for plan in plans_list if self.check_affect(plan)]

        self.current_step = "SelAppl"

        return self.T["Ap"] != []

    def applySelAppl(self) -> bool:
        """
        This method is used to select the plan that is applicable to the current goal.
        We say that a plan is applicable to a goal if both have the same functor,
        the same number of arguments and the context are satisfied

        We select the first plan that is applicable to the goal in the dict of
        applicable plans

        Returns:
            bool: True if the plan was found, False otherwise

        - If the plan was found, the dictionary T["p"] will be filled with the plan found and the current step will be changed to "AddIM"
        - If not plan was found, return False
        """
        for plan in self.T["Ap"]:
            for _ in agentspeak.unify_annotated(
                plan.head, self.frozen, self.T["i"].scope, self.T["i"].stack
            ):
                for _ in plan.context.execute(self, self.T["i"]):
                    self.T["p"] = plan
                    self.current_step = "AddIM"
                    return True
        return False

    def applyAddIM(self, delayed, calling_intention) -> bool:
        """
        This method is used to add the intention to the intention stack of the agent

        Returns:
            bool: True if the intention is added to the intention stack

        - When  the intention is added to the intention stack, the current step will be changed to "SelEv"
        """
        self.T["i"].head_term = self.frozen
        self.T["i"].instr = self.T["p"].body
        self.T["i"].calling_term = self.T["e"].head

        if not delayed and self.C["I"]:
            for intention_stack in self.C["I"]:
                if intention_stack[-1] == calling_intention:
                    intention_stack.append(self.T["i"])
                    return False
        new_intention_stack = collections.deque()
        new_intention_stack.append(self.T["i"])

        # Add the event and the intention to the Circumstance
        self.C["I"].append(new_intention_stack)

        self.current_step = "SelInt"
        return True


    def applySemanticRuleDeliberate(
        self, delayed=False, calling_intention=agentspeak.runtime.Intention
    ):
        """
        This method is used to apply the first part of the reasoning cycle.
        This part consists of the following steps:
        - Select an event
        - Find the plans that are related to the event
        - Find the plans that are applicable to the event
        - Select the plan that is applicable to the event
        - Add the intention to the intention stack of the agent
        """
        options = {
            "SelEv": self.applySelEv,
            "RelPl": self.applyRelPl,
            "AppPl": self.applyAppPl,
            "SelAppl": self.applySelAppl,
            "AddIM": self.applyAddIM,
        }

        flag = True
        while flag == True and self.current_step in options:
            if self.current_step == "AddIM":
                flag = options[self.current_step](delayed, calling_intention)
            else:
                flag = options[self.current_step]()

        return True

    def step(self) -> bool:
        """
        This method is used to apply the second part of the reasoning cycle.
        This method consist in selecting the intention to execute and executing it.
        This part consists of the following steps:
        - Select the intention to execute
        - Apply the clear intention
        - Apply the execution intention

        Raises:
            log.error: If the agent has no intentions
            log.exception: If the agent raises a python exception

        Returns:
            bool: True if the agent executed or cleaned an intention, False otherwise
        """
        options = {
            "SelInt": self.applySelInt,
            "CtlInt": self.applyCtlInt,
            "ExecInt": self.applyExecInt,
        }

        if self.current_step == "SelInt":
            if not options[self.current_step]():
                return False

        if self.current_step in options:
            flag = options[self.current_step]()
            return flag
        else:
            return True

    def applySelInt(self) -> bool:
        """
        This method is used to select the intention to execute

        Raises:
            RuntimeError:  If the agent has no intentions

        Returns:
            bool: True if the agent has intentions, False otherwise

        - If the intention not have instructions, the current step will be changed to "CtlInt" to clear the intention
        - If the intention have instructions, the current step will be changed to "ExecInt" to execute the intention

        """
        while self.C["I"] and not self.C["I"][0]:
            self.C["I"].popleft()

        for intention_stack in self.C["I"]:
            if not intention_stack:
                continue
            intention = intention_stack[-1]
            if intention.waiter is not None:
                if intention.waiter.poll(self.env):
                    intention.waiter = None
                else:
                    continue
            break
        else:
            return False

        if not intention_stack:
            return False

        instr = intention.instr
        self.intention_stack = intention_stack
        self.intention_selected = intention

        if not instr:
            self.current_step = "CtlInt"
        else:
            self.current_step = "ExecInt"

        return True

    def applyExecInt(self) -> bool:
        """
        This method is used to execute the instruction

        Raises:
            AslError: If the plan fails

        Returns:
            bool: True if the instruction was executed
        """
        try:
            if self.intention_selected.instr.f(self, self.intention_selected):
                # We set the intention.instr to the instr.success
                self.intention_selected.instr = self.intention_selected.instr.success

            else:
                # We set the intention.instr to the instr.failure
                self.intention_selected.instr = self.intention_selected.instr.failure
                if not self.T["i"].instr:
                    raise AslError("plan failure")

        except AslError as err:
            log = agentspeak.Log(LOGGER)
            raise log.error(
                "%s",
                err,
                loc=self.T["i"].instr.loc,
                extra_locs=self.T["i"].instr.extra_locs,
            )
        except Exception as err:
            log = agentspeak.Log(LOGGER)
            raise log.exception(
                "agent %r raised python exception: %r",
                self.name,
                err,
                loc=self.T["i"].instr.loc,
                extra_locs=self.T["i"].instr.extra_locs,
            )
        return True

    def applyCtlInt(self) -> True:
        """
        This method is used to control the intention

        Returns:
            bool: True if the intention was cleared
        """
        self.intention_stack.pop()
        if not self.intention_stack:
            self.C["I"].remove(self.intention_stack)
        elif self.intention_selected.calling_term:
            frozen = self.intention_selected.head_term.freeze(
                self.intention_selected.scope, {}
            )

            calling_intention = self.intention_stack[-1]
            if not agentspeak.unify(
                self.intention_selected.calling_term,
                frozen,
                calling_intention.scope,
                calling_intention.stack,
            ):
                raise RuntimeError("back unification failed")
        return True